12.2 BRANCH AND BOUND

Recall that the central idea of backtracking, discussed in the previous section, is to cut off a branch of the problem's state-space tree as soon as we can deduce that it cannot lead to a solution. This idea can be strengthened further if we deal with an optimization problem, one that seeks to minimize or maximize an objective function, usually subject to some constraints (a tour's length, the value of items selected, the cost of an assignment, and the like). Note that in the standard terminology of optimization problems, a feasible solution is a point in the problem's search space that satisfies all the problem's constraints (e.g., a
Hamiltonian circuit in the traveling salesman problem or a subset of items whose total weight does not exceed the knapsack's capacity in the knapsack problem), while an optimal solution is a feasible solution with the best value of the objective function (e.g., the shortest Hamiltonian circuit or the most valuable subset of items that fit the knapsack). 

-A way to provide for every node of a state space tree, a bound on the best value of the objective function on any solution that can be obstained by adding further components to the partially constructed solution represeneted by the node

- The value of the best solution seen so far

	If this information is available. we can compare a node's bound value with the value of the best solution seen so far: if the bound value is not better than the best solution seen so far-i.e., not smaller for a minimization problem and not larger for a maximization problem-the node is nonpromising and can be terminated (some people say the branch is "pruned") because no solution obtained from it can yield a better solution than the one already available. This is the principal idea
of the branch-and-bound technique. 

-The value of the nodes bound is not better than the value of the best solution seen so far

-The node represents no feasible solutions because the constraints of the problem are already violated

-The subset of feasible solutions represented by the node consists of a single point (and hence no further choices can be made) - in this case we compare the value of the objective function for this feasible solutions with that of the best solution seen so far and update the latter with the former if the new solution is better

In general, we terminate a search path at the current node in a state space tree of a branch and bound algorithm for any one of the following three reasons

-The value of the nodes bound is not better than the value of the best solution seen so far

-The node represents no feasible solutions because the constraints of the problem are already violated

-The subset of feasible solutions represented by the node consists of a single point (and hence no further choices can be made)-in this case we compare the value of the objective function for this feasible solution with that of the best solution seen so far and update the latter with the former if the new solution is better.

ASSIGNMENT PROBLEM
Let us illustrate the branch-and-bound approach by applying it to the problem of assigning n people to n jobs so that the total cost of the assignment is as small as possible. We introduced this problem in Section 3.4, where we solved it by exhaustive search. Recall that an instance of the assignment problem is specified by an n-by-n cost matrix C so that we can state the problem as follows: select one element in each row of the matrix so that no two selected elements are in the
same column and their sum is the smallest possible. 

KNAPSACK PROBLEM

Let us now discuss how we can apply the branch-and-bound technique to solving the knapsack problem. This problem was introduced in Section 3.4: given 11 items of known weights w1 and values v1, i = 1, 2, ... , 11, and a knapsack of capacity W, find the most valuable subset of the items that fit in the knapsack. It is convenient to order the items of a given instance in descending order by their value-to-weight ratios. Then the first item gives the best payoff per weight unit and the last one
gives the worst payoff per weight unit, with ties resolved arbitrarily: 

TRAVELING SALESMAN PROBLEM
We will be able to apply the branch-and-bound technique to instances of the traveling salesman problem if we come up with a reasonable lower bound on tour lengths. One very simple lower bound can be obtained by finding the smallest element in the intercity distance matrix D and multiplying it by the number of cities n. But there is a less obvious and more informative lower bound, which does not require a lot of work to compute. It is not difficult to show (Problem 8 in Exercises 12.2) that we can compute a lower bound on the length l of any tour as follows. For each city i, 1 ::: i ::: n, find the sums; of the distances from city i to the two nearest cities; compute the sum s of these n numbers; divide the result by 2; and, if all the distances are integers, round up the result to the nearest integer.





































