12.1 BACKTRACKING

n-QUEENS PROBLEM

As our first example, we use a perennial favorite of textbook writers, then-queens problem. The problem is to place n queens on an n-by-n chessboard so that no two queens attack each other by being in the same row or in the same column or on the same diagonal. For n = 1, the problem has a trivial solution, and it is easy to see that there is no solution for n = 2 and n = 3. So let us consider the four-queens problem and solve it by the backtracking technique. Since each of the four queens has to be placed in its own row, all we need to do is to assign a column for each queen on the board presented in Figure 12.1.

HAMILTONIAN CIRCUIT PROBLEM
As our next example, let us consider the problem of finding a Hamiltonian circuit in the graph in Figure 12.3a. 

Without loss of generality, we can assume that if a Hamiltonian circuit exists, it starts at vertex a. Accordingly, we make vertex a the root of the state-space tree (Figure 12.3b ). The first component of our future solution, if it exists, is a first intermediate vertex of a Hamiltonian circuit to be constructed. Using the alphabet order to break the three-way tie among the vertices adjacent to a, we select vertex b. From b, the algorithm proceeds to c, then to d, then toe, and finally to f, which proves to be a dead end. So the algorithm backtracks from f toe, then to d, and then to c, which provides the first alternative for the algorithm to pursue. Going from c toe eventually proves useless, and the algorithm has to backtrack from e to c and then to b. From there, it goes to the vertices f, e, c, and d, from which it can legitimately return to a, yielding the Hamiltonian circuit a, b, f, e, c, d, a. If
we wanted to find another Hamiltonian circuit, we could continue this process by backtracking from the leaf of the solution found. 


Subset-Sum Problem
As our last example, we consider the subset-sum problem: fmd a subset of a given setS= {s1, ... , sn) of n positive integers whose sum is equal to a given positive integer d. For example, for S = {1, 2, 5, 6, 8] and d = 9, there are two solutions: {1, 2, 6] and {1, 8]. Of course, some instances of this problem may have no solutions. 

GENERAL REMARKS
From a more general perspective, most backtracking algorithms fit the following description. An output of a backtracking algorithm can be thought of as an n-tuple (xt, x2 , ... , X11 ) where each coordinate xi is an element of some finite linearly ordered set S;. For example, for then-queens problem, each S; is the set of integers (column numbers) 1 through n. The tuple may need to satisfy some additional constraints (e.g., the nona !tacking requirements in then-queens problem). Depending on the problem, all solution tuples can be of the same length
(then-queens and the Hamiltonian circuit problem) or of different lengths (the subset-sum problem). A backtracking algorithm generates, explicitly or implicitly, a state-space tree; its nodes represent partially constructed tuples with the first i coordinates defined by the earlier actions of the algorithm. If such a tuple (x1, x2 , ... , x;) is not a solution, the algorithm finds the next element in S;+J that
is consistent with the values of (x1, x2 , ... , x1) and the problem's constraints and adds it to the tuple as its (i + 1)st coordinate. If such an element does not exist, the algorithm backtracks to consider the next value of x;, and so on. 
































