6.3 BALANCED SEARCH TREES


In Sections 1.4 and 4.4, we discussed the binary search tree-one of the principal data structures for implementing dictionaries. It is a binary tree whose nodes contain elements of a set of orderable items, one element per node, so that allelements in the left subtree are smaller than the element in the subtree's root, and all the elements in the right subtree are greater than it. Note that this transformation from a set to a binary search tree is an example of the representation-change technique. What do we gain by such transformation compared to the straightforward implementation of a dictionary by, say, an array? We gain in the time efficiency of searching, insertion, and deletion, which are all in EJ(log n), but only in the average case. In the worst case, these operations are in 8 (n) because the tree can degenerate into a severely unbalanced one with its height equal to n - 1.


Computer scientists have expended a lot of effort in trying to find a structure that preserves the good properties of the classical binary search tree-principally, the logarithmic efficiency of the dictionary operations and having the set's elements sorted-but avoids its worst-case degeneracy. They have come up with two approaches.

-The first approach is of the instance-simplification variety: an unbalanced binary search tree is transformed to a balanced one. Specific implementations of this idea differ by their definition of balance. An AVL tree requires the difference between the heights of the left and right subtrees of every node never exceed 1. A red-black tree tolerates the height of one subtree being twice as large as the other subtree of the same node. If an insertion or deletion of a new node creates a tree with a violated balance requirement, the tree is restructured by one of a family of special transformations called rotations that restore the balance required. (In this section, we discuss only AVL trees. Information about other types of binary search trees that utilize the idea of rebalancing via rotations, including red-black trees and splay trees, can be found in the references

-The second approach is of the representation-change variety: allow more than one element in a node of a search tree. Specific cases of such trees are 2-3 trees, 2-3-4 trees, and more general and important B-trees. They differ in the number of elements admissible in a single node of a search tree, but all are perfectly balanced. (We discuss the simplest of such trees, the 2-3 tree, in this section, leaving the discussion of B-trees for Chapter 7.) 

AVL Trees
AVL trees were invented in 1962 by two russian scienctists G.M.Adelson-Velsky and E.M.Landis after whom the data structure is named after.

DEFINITION AnAVL tree is a binary search tree in which the balance factor of every node, which is defined as the difference between the heights of the node's left and right subtrees, is either 0 or + 1 or -1. (The height of the empty tree is defined as -1.)


The double right-left rotation (RL-rotation) is the mirror image of the double LR-rotation and is left for the exercises. 
































